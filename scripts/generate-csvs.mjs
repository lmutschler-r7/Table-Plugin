// scripts/generate-csvs.mjs
// Build `src/csvs.ts` from all .csv files in `src/csvs/`
import { promises as fs } from "fs";
import path from "path";

const CSV_DIR = path.resolve("src/csvs");   // folder with .csv files
const OUT_TS  = path.resolve("src/csvs.ts"); // generated TS file

const toLabel = (basename) =>
  basename
    .replace(/[-_]+/g, " ")
    .replace(/\s+/g, " ")
    .trim()
    .replace(/\b\w/g, (m) => m.toUpperCase());

const escapeForTemplate = (s) =>
  s
    // normalize newlines for repo consistency
    .replace(/\r\n?/g, "\n")
    // strip BOM if present
    .replace(/^\uFEFF/, "")
    // escape backslashes first
    .replace(/\\/g, "\\\\")
    // escape backticks so template literal stays intact
    .replace(/`/g, "\\`")
    // escape ${ to avoid template interpolation
    .replace(/\$\{/g, "\\${");

async function main() {
  // ensure folder exists
  try { await fs.mkdir(CSV_DIR, { recursive: true }); } catch {}

  const entries = await fs.readdir(CSV_DIR, { withFileTypes: true });

  const csvFiles = entries
    .filter((e) => e.isFile() && /\.csv$/i.test(e.name))
    .map((e) => e.name)
    .sort((a, b) => a.localeCompare(b));

  const items = [];
  for (const filename of csvFiles) {
    const filePath = path.join(CSV_DIR, filename);
    const raw = await fs.readFile(filePath, "utf8");
    const base = filename.replace(/\.csv$/i, "");
    items.push({
      id: base.toLowerCase(),             // simple id from filename
      label: toLabel(base),               // nice human label
      filename,
      contents: escapeForTemplate(raw),   // safe in TS template literal
    });
  }

  const ts = `/* eslint-disable */
// AUTO-GENERATED by scripts/generate-csvs.mjs â€” DO NOT EDIT BY HAND.

export type CsvPreset = {
  id: string
  label: string
  filename: string
  contents: string
}

export const BUILTIN_CSVS: CsvPreset[] = [
${items
  .map(
    (it) => `  {
    id: ${JSON.stringify(it.id)},
    label: ${JSON.stringify(it.label)},
    filename: ${JSON.stringify(it.filename)},
    contents: \`${it.contents}\`
  }`
  )
  .join(",\n")}
]
`;

  await fs.writeFile(OUT_TS, ts, "utf8");
  console.log(`Wrote ${OUT_TS} with ${items.length} preset${items.length === 1 ? "" : "s"}.`);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
